{"version":3,"file":"main.js","mappings":"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AEnE;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA,aAAa,aAAa;AAC1B,aAAa,eAAe;AAC5B;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,aAAa,QAAQ;AACrB,aAAa,UAAU;AACvB,eAAe,mBAAmB;AAClC;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA,aAAa,aAAa;AAC1B,aAAa,UAAU;AACvB;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;ACjGO;AACP;AACA;AACA;;AAEA;AACA;AACA,+BAA+B;AAC/B;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,+BAA+B;AAC/B;;AAEA;AACA;AACA,+BAA+B;AAC/B;;AAEA;AACA;AACA;AACA;;;;;;;UCnCA;UACA;;UAEA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;;UAEA;UACA;;UAEA;UACA;UACA;;;;;WCtBA;WACA;WACA;WACA;WACA,yCAAyC,wCAAwC;WACjF;WACA;WACA;;;;;WCPA;WACA;WACA;WACA;WACA,GAAG;WACH;WACA;WACA,CAAC;;;;;WCPD;;;;;WCAA;WACA;WACA;WACA,uDAAuD,iBAAiB;WACxE;WACA,gDAAgD,aAAa;WAC7D;;;;;WCNA;WACA;WACA;WACA;WACA;WACA;WACA;WACA;WACA;WACA;WACA;WACA;WACA;WACA;WACA;WACA;WACA;WACA;WACA;;;;;;;;;;;;;;;;;;;;;;AClB0D;AACjB;AACc;AACE;AACD;AACT;AACL;AACd;AACqB;AACJ;AACE;;AAE/C;AACA,sBAAsB,yDAAS;AAC/B,kBAAkB,mDAAI;AACtB;;AAEA;AACA;AACA;AACA;AACA;;;AAGA,kBAAkB,sDAAQ;AAC1B,kBAAkB,sDAAQ;;AAE1B;AACA,sBAAsB,wDAAO;;AAE7B,sBAAsB,sDAAQ;AAC9B;AACA;;AAEA,wBAAwB,sDAAQ;AAChC;;AAEA,sBAAsB,sDAAQ;AAC9B;AACA;;AAEA,wBAAwB,sDAAQ;AAChC,qBAAqB,sDAAQ,YAAY,uEAAU;AACnD;;AAEA,EAAE,sDAAQ,gCAAgC,kDAAI;AAC9C;;AAEA;AACA;AACA;AACA,IAAI,qEAAW;AACf,GAAG;;AAEH;AACA;AACA;;AAEA;AACA,MAAM,qEAAW;AACjB,MAAM;AACN;AACA;AACA,GAAG;;AAEH;AACA;AACA;AACA,GAAG;;AAEH;AACA;;;AAGA;AACA,yBAAyB,sDAAQ;AACjC,uBAAuB,sDAAQ;AAC/B;AACA;;AAEA,EAAE,sDAAQ;AACV;;AAEA,WAAW;AACX;;AAEA;AACA;;AAEA,EAAE,gEAAU;AACZ,2BAA2B,gEAAU;;AAErC,EAAE,gEAAU;AACZ;AACA,IAAI,gEAAU;AACd,GAAG;;AAEH;AACA;;AAEA,IAAI,8DAAU;AACd;AACA,KAAK;;AAEL;AACA,IAAI,qEAAW;AACf;;AAEA;AACA,IAAI,gEAAU;AACd,GAAG;AACH;;AAEA;AACA;AACA,UAAU,0CAA0C;AACpD,eAAe,sEAAW;;AAE1B,EAAE,qEAAW;AACb;;AAEA,EAAE,sDAAQ;AACV,CAAC","sources":["webpack://task-hero/./src/assets/images/icons/burger.svg","webpack://task-hero/./src/assets/images/icons/calendar.svg","webpack://task-hero/./src/assets/images/icons/trash.svg","webpack://task-hero/./src/assets/images/logo.svg","webpack://task-hero/./src/styles/style.css","webpack://task-hero/./src/components/logo.js","webpack://task-hero/./src/components/new-task-btn.js","webpack://task-hero/./src/components/new-task-form.js","webpack://task-hero/./src/components/render-tasks.js","webpack://task-hero/./src/components/sidebar.js","webpack://task-hero/./src/components/task-row.js","webpack://task-hero/./src/controllers/Task.js","webpack://task-hero/./src/utils/compare-dates.js","webpack://task-hero/./src/utils/create-task.js","webpack://task-hero/./src/utils/createElement.js","webpack://task-hero/./src/utils/dom-utils.js","webpack://task-hero/./src/utils/url-params.js","webpack://task-hero/webpack/bootstrap","webpack://task-hero/webpack/runtime/define property getters","webpack://task-hero/webpack/runtime/global","webpack://task-hero/webpack/runtime/hasOwnProperty shorthand","webpack://task-hero/webpack/runtime/make namespace object","webpack://task-hero/webpack/runtime/publicPath","webpack://task-hero/./src/index.js"],"sourcesContent":["export default __webpack_public_path__ + \"images/2788165d80a7c817cf59b4ab3fd3b7f2.svg\";","export default __webpack_public_path__ + \"images/b2e849230327734316d5f156f6e0eb5e.svg\";","export default __webpack_public_path__ + \"images/e9eed7418b0527755c1aedd18e26f611.svg\";","export default __webpack_public_path__ + \"images/6c75310be62be1a269ad22d263cd2850.svg\";","// extracted by mini-css-extract-plugin\nexport {};","import TodoHeroLogo from \"../assets/images/logo.svg\";\nexport function Logo() {\n  const logo = document.createElement(\"img\");\n  logo.src = TodoHeroLogo;\n  logo.style.width = \"100px\";\n  return logo\n}\n\nexport const logo = Logo()\n","import { createElement } from \"../utils/createElement\";\n\nfunction NewTaskBtn() {\n  const newTaskBtn = createElement(\"button\", \"task-btn__create\");\n    newTaskBtn.innerText = \"+ Create new task\";\n    return newTaskBtn;\n}\n\nexport const newTaskBtn = NewTaskBtn();","import { DOMUtils } from \"../utils/dom-utils\";\nimport { newTaskBtn } from \"./new-task-btn\";\n\nconst Container = () => {\n  return DOMUtils.createElement(\"section\", [\"task-form__group\"]);\n};\n\nconst Field = (tag, name, placeholder = \"\") => {\n  const field = DOMUtils.createElement(tag, [\n    \"task-form__field\",\n    \"font-inter-tight\",\n  ]);\n  field.name = name;\n  if (placeholder) field.placeholder = placeholder;\n  return field;\n};\n\nconst submitBtn = DOMUtils.createButton({ text: \"Add task\" });\nsubmitBtn.style.fontSize = \"12px\";\nsubmitBtn.type = \"submit\";\n\nconst cancelBtn = DOMUtils.createButton({\n  text: \"Cancel\",\n  variant: \"secondary\",\n});\n\nconst titleInput = Field(\"input\", \"title\", \"Task title\");\n\nconst descriptionInput = Field(\"textarea\", \"description\", \"Task description\");\n\nconst selectPriority = DOMUtils.createSelect(\"priority\", [\n  \"low\",\n  \"medium\",\n  \"hight\",\n]);\n\nconst taskDateField = Field(\"input\", \"due-date\", \"Select task date\");\ntaskDateField.classList.add(\"input-date\");\ntaskDateField.type = \"date\";\n\nexport function NewTaskForm() {\n  const form = DOMUtils.createElement(\"form\", [\"task-form__container\"]);\n  const fieldsContainer = DOMUtils.createElement(\"section\", [\n    \"task-form__fields-container\",\n  ]);\n\n  fieldsContainer.appendChild(titleInput);\n  fieldsContainer.appendChild(descriptionInput);\n\n  const formFooter = DOMUtils.createElement(\"section\", [\"task-form__footer\"]);\n  const priorityAndDateContainer = Container();\n\n  priorityAndDateContainer.appendChild(taskDateField);\n  priorityAndDateContainer.appendChild(selectPriority);\n\n  const buttonsContainer = Container();\n\n  cancelBtn.type = \"button\";\n  cancelBtn.style.fontSize = \"12px\";\n\n  cancelBtn.addEventListener(\"click\", () => {\n    form.remove();\n    newTaskBtn.classList.remove(\"hidden\");\n  });\n\n  buttonsContainer.appendChild(cancelBtn);\n  buttonsContainer.appendChild(submitBtn);\n\n  formFooter.appendChild(priorityAndDateContainer);\n  formFooter.appendChild(buttonsContainer);\n\n  form.appendChild(fieldsContainer);\n  form.appendChild(formFooter);\n\n  return form;\n}\n","import { TaskRow } from './task-row';\n\nexport const renderTasks = (tasks, element, handleDelete) => {\n  element.innerHTML = \"\";\n\n  if (tasks.length > 0) {\n    for (let task of tasks) {\n      const taskCard = TaskRow(task, () => handleDelete(task.id, taskCard));\n      taskCard.id = task.id;\n      element.appendChild(taskCard);\n    }\n  }\n};","import { createElement } from \"../utils/createElement\";\n\nexport class Sidebar {\n  constructor() {\n    this.sidebar = createElement(\"aside\", 'sidebar');\n  }\n\n  addElements(elements) {\n    for(const element of elements) {\n      this.sidebar.appendChild(element);\n    }\n  }\n\n  render() {\n    return this.sidebar;\n  }\n \n}","import CalendarIcon from \"../assets/images/icons/calendar.svg\";\nimport TrashIcon from \"../assets/images/icons/trash.svg\";\nimport { DOMUtils } from \"../utils/dom-utils\";\n\nexport function TaskRow(task, deleteTask) {\n  const taskCardEl = DOMUtils.createElement(\"div\", [\"task-content__row\"]);\n  const taskBody = DOMUtils.createElement(\"article\");\n\n  const taskTitleEl = DOMUtils.createElement(\"h4\");\n  taskTitleEl.innerText = task.title;\n  taskBody.appendChild(taskTitleEl);\n\n  if (task.description) {\n    const taskDescEl = DOMUtils.createElement(\"p\");\n    taskDescEl.innerText = task.description;\n    taskBody.appendChild(taskDescEl);\n  }\n\n  const deleteTaskBtn = DOMUtils.createElement(\"button\", [\"task-btn__delete\"]);\n  const trashIcon = DOMUtils.createIcon(TrashIcon);\n  deleteTaskBtn.appendChild(trashIcon);\n\n  deleteTaskBtn.addEventListener(\"click\", () => {\n    deleteTask(task.id)\n  });\n\n  DOMUtils.appendElements(taskCardEl, [taskBody,deleteTaskBtn])\n\n  const footer = Footer(task.date, task.priority)\n  taskBody.appendChild(footer);\n\n  return taskCardEl;\n}\n\nconst Footer = (taskDate, priority) => {\n  const footer = DOMUtils.createElement(\"footer\");\n\n  const dateEl = DOMUtils.createElement(\"div\", [\"task-row__date\"]);\n\n  const calendarIcon = DOMUtils.createIcon(CalendarIcon);\n  calendarIcon.style.width = \"1rem\";\n\n  const date = DOMUtils.createElement(\"span\");\n  const dueDate = new Date(taskDate);\n\n  const day = dueDate.getUTCDate().toString().padStart(2, 0);\n  const month = dueDate.getUTCMonth().toString().padStart(2, 0);\n  const year = dueDate.getUTCFullYear().toString().padStart(2, 0);\n \n  date.innerText = `${day}/${month}/${year}`;\n\n  dateEl.appendChild(calendarIcon);\n  dateEl.appendChild(date);\n\n  const priorityEl = DOMUtils.createElement(\"span\", [\n    \"task-priority\",\n    `task-priority__${priority}`,\n  ]);\n  priorityEl.innerText = priority;\n\n  DOMUtils.appendElements(footer, [dateEl,priorityEl])\n\n  return footer\n}","import { compareDates } from \"../utils/compare-dates\";\n\nexport class Task {\n  #localStorageId = \"@todo-hero:tasks\";\n\n  constructor(tasks = []) {\n    this.tasks = tasks;\n  }\n\n  getTasks() {\n    const tasksJSON = localStorage.getItem(this.#localStorageId);\n    this.tasks = JSON.parse(tasksJSON) ?? [];\n    return this.tasks;\n  }\n\n  #saveTasks() {\n    localStorage.setItem(this.#localStorageId, JSON.stringify(this.tasks));\n  }\n\n  createTask(task) {\n    const newTask = {\n      id: new Date().getTime(),\n      title: task.title,\n      description: task.description ?? null,\n      priority: task.priority ?? \"low\",\n      date: task.date,\n      completed: false,\n      projectId: task.projectId ?? null,\n    };\n\n    this.tasks.push(newTask);\n\n    this.#saveTasks();\n  }\n\n  getTodayTasks() {\n    const todayTasks = this.tasks.filter(t => compareDates(new Date(t.date), new Date()))\n\n    return todayTasks ?? [];\n  }\n\n  deleteTask(id) {\n    this.tasks = this.tasks.filter((task) => task.id !== id);\n    localStorage.setItem(this.#localStorageId, JSON.stringify(this.tasks));\n  }\n}\n","/**\n * \n * @param {Date} d1 - The first Date object to compare.\n * @param {Date} d2 - The second Date object to compare.\n * @returns - Returns true if the dates are the same, false otherwise.\n */\nexport function compareDates(d1, d2) {\n  return (\n    d1.getFullYear() === d2.getFullYear() &&\n    d1.getDate() === d2.getDate() &&\n    d1.getMonth() === d2.getMonth()\n  );\n}\n","export function createTask(evt, createTask) {\n  const formData = new FormData(evt.target);\n  const title = formData.get(\"title\");\n  const description = formData.get(\"description\");\n  const date = formData.get(\"due-date\");\n  const priority = formData.get(\"priority\");\n\n  if (!title) return;\n\n  const newTask = {\n    title,\n    description,\n    priority,\n    date: date ? new Date(date) : new Date(),\n  };\n\n  createTask(newTask)\n}\n","/**\n* Creates a new HTML element with an optional class name.\n* \n* @param {string} tag - The HTML tag name of the element to create.\n* @param {string} [className=\"\"] - The optional class name to add to the element.\n* @returns {HTMLElement} - The newly created HTML element.\n*/\nexport const createElement = (tag, className = \"\") => {\n const element = document.createElement(tag);\n if (className) element.classList.add(className);\n return element;\n};","export class DOMUtils {\n  /**\n   * Creates a new HTML element with optional class names.\n   *\n   * @param {string} tag - The HTML tag name of the element to create.\n   * @param {string[]} [classNames=[]] - An array of class names to add to the element.\n   * @returns {HTMLElement} - The newly created HTML element.\n   */\n  static createElement(tag, classNames = []) {\n    const element = document.createElement(tag);\n    if (classNames.length > 0) {\n      classNames.forEach((className) => element.classList.add(className));\n    }\n\n    return element;\n  }\n\n  /**\n   * Creates a new HTML element with optional class names.\n   *\n   * @param {string} tag - The HTML tag name of the element to create.\n   * @param {string[]} [classNames=[]] - An array of class names to add to the element.\n   * @returns {HTMLElement} - The newly created HTML element.\n   */\n  static createIcon(src, classNames = []) {\n    const icon = document.createElement(\"img\");\n    icon.src = src;\n\n    if (classNames.length > 0) {\n      classNames.forEach((className) => element.classList.add(className));\n    }\n\n    return icon;\n  }\n\n  /**\n   * Creates a new HTML button element with optional class names.\n   *\n   * @param {Object} options - The options for creating the button.\n   * @param {string} options.text - The text content of the button.\n   * @param {(\"primary\"|\"secondary\")} [options.variant=\"primary\"] - The variant of the button.\n   * @param {string[]} [options.classNames=[]] - An array of class names to add to the button.\n   * @returns {HTMLButtonElement} - The newly created HTML button element.\n   */\n  static createButton({ text, variant = \"primary\", classNames = [] }) {\n    const button = document.createElement(\"button\");\n    button.innerText = text;\n    button.classList.add(\"btn\", \"font-inter-bold\", `btn__${variant}`);\n\n    if (classNames.length > 0) {\n      classNames.forEach((className) => element.classList.add(className));\n    }\n\n    return button;\n  }\n\n  /**\n   * \n   * @param {HTMLElement} element - the element to set chields\n   * @param {HTMLElement[]} chields - list of elements\n   */\n  static appendElements(element, chields) {\n    chields.forEach((child) => element.appendChild(child));\n  }\n\n  /**\n   * Creates a new HTML select element with options.\n   *\n   * @param {string} name - The name attribute of the select element.\n   * @param {string[]} [options=[]] - An array of options to populate the select element.\n   * @returns {HTMLSelectElement} - The newly created HTML select element.\n   */\n  static createSelect(name, options = []) {\n    const select = document.createElement(\"select\");\n    select.classList.add(\"select\");\n    select.name = name;\n\n    for (let option of options) {\n      const optionEl = DOMUtils.createElement(\"option\");\n      optionEl.classList.add(\"option\");\n      optionEl.value = option;\n      optionEl.innerText = option;\n      select.appendChild(optionEl);\n    }\n\n    return select;\n  }\n\n  /**\n   * Toggles one or more class names on an element.\n   *\n   * @param {HTMLElement} element - The element to toggle class names on.\n   * @param {string[]} classNames - An array of class names to toggle.\n   */\n  static toggleClass(element, classNames) {\n    classNames.forEach((className) => element.classList.toggle(className));\n  }\n}\n","export class URLParams {\n  constructor(url = window.location.href) {\n    this.url = new URL(url);\n  }\n\n  setParam(paramName, paramValue) {\n    this.url.searchParams.set(paramName, paramValue);\n    window.history.pushState({}, '', this.url);\n  }\n\n  getParam(paramName) {\n    return this.url.searchParams.get(paramName);\n  }\n\n  getAllParams() {\n    const params = {};\n    for (const [key, value] of this.url.searchParams.entries()) {\n      params[key] = value;\n    }\n    return params;\n  }\n\n  removeParam(paramName) {\n    this.url.searchParams.delete(paramName);\n    window.history.pushState({}, '', this.url);\n  }\n\n  clearParams() {\n    this.url.search = ''\n    window.history.pushState({}, '', this.url);\n  }\n\n  toString() {\n    return this.url.toString();\n  }\n}\n","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.g = (function() {\n\tif (typeof globalThis === 'object') return globalThis;\n\ttry {\n\t\treturn this || new Function('return this')();\n\t} catch (e) {\n\t\tif (typeof window === 'object') return window;\n\t}\n})();","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","var scriptUrl;\nif (__webpack_require__.g.importScripts) scriptUrl = __webpack_require__.g.location + \"\";\nvar document = __webpack_require__.g.document;\nif (!scriptUrl && document) {\n\tif (document.currentScript)\n\t\tscriptUrl = document.currentScript.src;\n\tif (!scriptUrl) {\n\t\tvar scripts = document.getElementsByTagName(\"script\");\n\t\tif(scripts.length) {\n\t\t\tvar i = scripts.length - 1;\n\t\t\twhile (i > -1 && (!scriptUrl || !/^http(s?):/.test(scriptUrl))) scriptUrl = scripts[i--].src;\n\t\t}\n\t}\n}\n// When supporting browsers where an automatic publicPath is not supported you must specify an output.publicPath manually via configuration\n// or pass an empty string (\"\") and set the __webpack_public_path__ variable from your code to use your own logic.\nif (!scriptUrl) throw new Error(\"Automatic publicPath is not supported in this browser\");\nscriptUrl = scriptUrl.replace(/#.*$/, \"\").replace(/\\?.*$/, \"\").replace(/\\/[^\\/]+$/, \"/\");\n__webpack_require__.p = scriptUrl;","import BurgerIcon from \"./assets/images/icons/burger.svg\";\nimport { logo } from \"./components/logo\";\nimport { newTaskBtn } from \"./components/new-task-btn\";\nimport { NewTaskForm } from \"./components/new-task-form\";\nimport { renderTasks } from \"./components/render-tasks\";\nimport { Sidebar } from \"./components/sidebar\";\nimport { Task } from \"./controllers/Task\";\nimport \"./styles/style.css\";\nimport { createTask } from \"./utils/create-task\";\nimport { DOMUtils } from \"./utils/dom-utils\";\nimport { URLParams } from \"./utils/url-params\";\n\nconst app = document.getElementById(\"app\");\nconst urlParams = new URLParams();\nconst tasks = new Task();\nlet allTasks = tasks.getTasks();\n\nconst handleDeleteTask = (id, element) => {\n  tasks.deleteTask(id);\n  tasksList.removeChild(element);\n  allTasks = tasks.getTasks();\n};\n\n\nconst tasksList = DOMUtils.createElement(\"div\", [\"tasks-content__list\"]);\nconst pageTitle = DOMUtils.createElement(\"h2\");\n\nconst createSidebar = () => {\n  const sidebar = new Sidebar();\n\n  const allTasksBtn = DOMUtils.createElement(\"button\", [\"sidebar-item\"]);\n  allTasksBtn.style.marginTop = \"3rem\";\n  allTasksBtn.innerText = \"All\";\n\n  const todayTasksBtn = DOMUtils.createElement(\"button\", [\"sidebar-item\"]);\n  todayTasksBtn.innerText = \"Today\";\n\n  const projectsBtn = DOMUtils.createElement(\"button\", [\"sidebar-item\"]);\n  projectsBtn.style.marginTop = \"2rem\";\n  projectsBtn.innerText = \"Projects\";\n\n  const sidebarHeader = DOMUtils.createElement(\"div\", [\"sidebar-header\"]);\n  const burgerIcon = DOMUtils.createIcon(BurgerIcon);\n  burgerIcon.style.width = \"24px\";\n\n  DOMUtils.appendElements(sidebarHeader, [logo, burgerIcon]);\n  sidebar.addElements([sidebarHeader, allTasksBtn, todayTasksBtn, projectsBtn]);\n\n  allTasksBtn.addEventListener(\"click\", () => {\n    pageTitle.innerText = \"Tasks\";\n    urlParams.setParam(\"select\", \"all\");\n    renderTasks(allTasks, tasksList, handleDeleteTask);\n  });\n\n  todayTasksBtn.addEventListener(\"click\", () => {\n    pageTitle.innerText = \"Today tasks\";\n    const todayTasks = tasks.getTodayTasks();\n\n    if (todayTasks.length > 0) {\n      renderTasks(todayTasks, tasksList, handleDeleteTask);\n    } else {\n      tasksList.innerText = \"\";\n    }\n  });\n\n  projectsBtn.addEventListener(\"click\", () => {\n    pageTitle.innerText = \"Projects\";\n    urlParams.setParam(\"select\", \"projects\");\n  });\n\n  return sidebar;\n};\n\n\nconst createTasksContainer = () => {\n  const tasksContainer = DOMUtils.createElement(\"section\", [\"tasks-container\"]);\n  const tasksContent = DOMUtils.createElement(\"div\", [\"tasks-content\"]);\n  \n  pageTitle.innerText = \"Tasks\";\n\n  DOMUtils.appendElements(tasksContent, [pageTitle, tasksList]);\n  tasksContainer.appendChild(tasksContent);\n\n  return { tasksContainer, tasksContent, pageTitle };\n};\n\nconst initializeForm = (form, tasksContent) => {\n  form.style.marginTop = \"1rem\";\n\n  newTaskBtn.style.marginTop = \"2rem\";\n  tasksContent.appendChild(newTaskBtn);\n\n  newTaskBtn.addEventListener(\"click\", () => {\n    tasksContent.appendChild(form);\n    newTaskBtn.classList.add(\"hidden\");\n  });\n\n  form.addEventListener(\"submit\", (e) => {\n    e.preventDefault();\n\n    createTask(e, (newTask) => {\n      tasks.createTask(newTask);\n    });\n\n    allTasks = tasks.getTasks();\n    renderTasks(allTasks, tasksList, handleDeleteTask);\n    form.reset();\n\n    tasksContent.removeChild(form);\n    newTaskBtn.classList.remove(\"hidden\");\n  });\n};\n\nwindow.addEventListener(\"DOMContentLoaded\", () => {\n  const sidebar = createSidebar();\n  const { tasksContainer, tasksContent, pageTitle } = createTasksContainer();\n  const form = NewTaskForm();\n\n  renderTasks(allTasks, tasksList, handleDeleteTask);\n  initializeForm(form, tasksContent);\n\n  DOMUtils.appendElements(app, [sidebar.render(), tasksContainer])\n});\n"],"names":[],"sourceRoot":""}